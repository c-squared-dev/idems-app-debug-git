##################################################################################
#         About
##################################################################################
# Build and deploy app to firebase
# It supports deploying to custom hosting channel for long-lived preview urls (30d)
# Or using custom hosting target

##################################################################################
#         Github Secrets (configured per deployment)
##################################################################################
# These should be configured in https://github.com/{org}/{repo}/settings/secrets/actions

# | FIREBASE_PROJECT_ID         | ID of firebase project to use
# | FIREBASE_SERVICE_ACCOUNT    | JSON export of service account (exported from firebase console)

##################################################################################
#         Configuration (updated per deployment)
##################################################################################

env:
  FIREBASE_HOSTING_CHANNEL: dev # | Name of preview channel to deploy to (use 'live' for permanent site or '' for random pr url)
  FIREBASE_HOSTING_TARGET: "" # | Optional override if using multiple hosting target sites

##################################################################################
#         Main Code
##################################################################################

name: Deploy - Firebase
on:
  push:
    branches:
      - main
      - ci/firebase-dev

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "firebase_dev"
  cancel-in-progress: true

jobs:
  # build_action:
  #   uses: ./.github/workflows/app-build.yml
  #   with:
  #     artifact-name: www

  deploy_dev:
    # needs: build_action
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.deploy.outputs.urls }}
    steps:
      # Extract build artifact
      - uses: actions/checkout@v3
      # - name: Download Build Artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: www
      # - name: Extract Build folder
      #   run: |
      #     mkdir www
      #     tar -xf artifact.tar --directory www

      # Create a basic .firebaserc file mapping any firebase deployment host targets
      - name: Populate Firebase Targets
        run: |
          FIREBASE_RC_TARGETS_APP=$(jq -n \
            --argjson app '["${{secrets.FIREBASE_PROJECT_ID}}"]' \
            '$ARGS.named'
            )

          echo targets_app: $FIREBASE_RC_TARGETS_APP

          FIREBASE_RC_TARGETS=$(jq -n \
            --argjson ${{secrets.FIREBASE_PROJECT_ID}} '{"hosting":$FIREBASE_RC_TARGETS_APP}' \
            '$ARGS.named'
            )

          echo targets: $FIREBASE_RC_TARGETS

          FIREBASE_RC=$(jq -n \
          --argjson projects '{"default":${{secrets.FIREBASE_PROJECT_ID}}}' \
          --argjson targets '$FIREBASE_RC_TARGETS' \
          '$ARGS.named'
          )

          echo $FIREBASE_RC > .firebaserc
          cat .firebaserc

      # Create a basic firebase.json file to handle single-page-app hosting redirects
      # https://www.baeldung.com/linux/jq-command-json
      # https://jqlang.github.io/jq/manual/
      # https://jqplay.org/
      - name: Populate Firebase JSON
        run: |
          mkdir www
          echo "<html lang="en"><body>Test</body></html>" > www/index.html

          FIREBASE_JSON_HOSTING=$(jq -n \
          --arg target "app" \
          --arg public "www" \
          --argjson ignore '["firebase.json"]' \
          --argjson rewrites '[{"source": "**","destination": "/index.html"}]' \
          '$ARGS.named'
          )

          FIREBASE_JSON=$(jq -n \
          --argjson hosting "[$FIREBASE_JSON_HOSTING]" \
          '$ARGS.named'
          )

          echo $FIREBASE_JSON > firebase.json
          cat firebase.json

      # Deploy to firebase
      - id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: "${{ secrets.FIREBASE_PROJECT_ID }}"
          channelId: "${{ env.FIREBASE_HOSTING_CHANNEL }}"
          target: "${{ env.FIREBASE_HOSTING_TARGET }}"
          expires: "30d"
# echo $FIREBASE_JSON | jq '.hosting[0]'
